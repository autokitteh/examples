load('os', 'os')
load('autokitteh.aws', creds='secret_credentials')

load('github.com/autokitteh/examples/modules/terraform/terraform.kitteh', 'workspace')

load('./aws.kitteh', 'find_vpc_by_name', 'list_subnets')

load('./vpc.txtar', vpc_files='files')
load('./subnets.txtar', subnets_files='files')


def _init(kind, name, region, files):
  env = [
    'AWS_REGION=' + region,
    'AWS_ACCESS_KEY_ID=' + creds.access_key_id,
    'AWS_SECRET_ACCESS_KEY=' + creds.secret_access_key,
    'AWS_SESSION_TOKEN=' + creds.session_token,
  ]

  w = workspace(default_env=env)

  for name, content in files.items():
    os.write_text_file(w.workdir + '/' + name, content)

  os.write_text_file(
    w.workdir + '/_backend.tf',
    '''terraform {
	backend "s3" {
    encrypt    = true
	  bucket     = "autokitteh-temporal-terraform-demo-state"
	  key        = "%(key)s"
	  region     = "%(region)s"
	  access_key = "%(access_key_id)s"
	  secret_key = "%(secret_access_key)s"
	  token      = "%(session_token)s"
	}
}''' % {
    'key': '%s-%s.tfstate' % (kind, name),
    'region': region,
    'access_key_id': creds.access_key_id,
    'secret_access_key': creds.secret_access_key,
    'session_token': creds.session_token,
  })

  w.init()

  return w


def create_vpc(name, region, cidr_block):
  vpc = find_vpc_by_name(name)

  w = _init('vpc', name, region, vpc_files)

  vars = {
    'cidr_block': cidr_block,
    'name': name,
  }

  if vpc:
    vpc_id = vpc.get('vpc_id')
    if vpc_id:
      w.import_(vars=vars, addr='aws_vpc.vpc', id=vpc_id, allow_fail=True)

  w.apply(vars=vars)

  return w.output().get('vpc_id', {}).get('value')


def destroy_vpc(name, region):
  _init('vpc', name, region, vpc_files).destroy()


def create_subnets(name, region, vpc_id, subnets):
  w = _init('subnets', name, region, subnets_files)

  subnets = [{
    'cidr_block': subnet['cidr_block'],
    'name': '%s-%s' % (name, subnet['az']),
    'availability_zone': '%s%s' % (region, subnet['az']),
  } for subnet in subnets]

  vars = {'vpc_id': vpc_id, 'subnets': subnets}

  for subnet in list_subnets(vpc_id):
    w.import_(
      vars=vars,
      addr='aws_subnet.subnet["%(availability_zone)s"]' % subnet,
      id=subnet['subnet_id'],
      allow_fail=True
    )

  w.apply(vars=vars)


def destroy_subnets(name, region):
  _init('subnets', name, region, subnets_files).destroy()


def create_network(name, region, cidr_block, subnets):
  vpc_id = create_vpc(name, region, cidr_block)

  print('created vpc, vpc_id=%s' % vpc_id)

  create_subnets(name, region, vpc_id, subnets)

  print('created subnets')


def destroy_network(name, region):
  #destroy_subnets(name, region)

  #print('destroyed subnets')

  destroy_vpc(name, region)

  print('destroyed vpc')
