# vim: set syntax=python:

load('os', 'os')
load('encoding/json', 'json')


def workspace(workdir=None, tfpath=None, default_env={}):
  if not tfpath:
    tfpath = os.look_path('terraform')

    if not tfpath:
      fail('unable to locate terraform')

  if workdir == None:
    workdir = os.make_temp_dir()

  def exec(cmd, args=[], vars={}, env=[], allow_fail=False):
    vargs = []
    if vars:
      # TODO: write to a tempfile somewhere, do not mess with workdir.
      path = '%s/terraform.tsvars.json' % workdir

      os.write_text_file(path, json.encode(vars))

      vargs = ['-var-file=' + path]

    if not env:
      env = default_env

    rc, out = os.exec(tfpath, [cmd, '-no-color'] + vargs + args, env=env, dir=workdir, fail=allow_fail)
    return rc, out

  def init(env=[], allow_fail=False):
    exec('init', env=env, allow_fail=allow_fail)

  def import_(addr, id, vars={}, env=[], allow_fail=False):
    exec('import', ['-input=false'] + [addr, id], vars=vars, env=env, allow_fail=allow_fail)

  def apply(vars={}, env=[], allow_fail=False):
    exec('apply', ['-input=false', '-auto-approve'], vars=vars, env=env, allow_fail=allow_fail)

  def destroy(vars={}, env=[], allow_fail=False):
    exec('destroy', ['-input=false', '-auto-approve'], vars=vars, env=env, allow_fail=allow_fail)

  def output(env=[], allow_fail=False):
    rc, out = exec('output', ['-json'], env, allow_fail=allow_fail)
    if not rc:
      out = json.decode(out)
    return rc, out

  return struct(
    init=init,
    import_=import_,
    apply=apply,
    destroy=destroy,
    output=output,
    exec=exec,
    workdir=workdir,
  )
